package bst

import (
	"fmt"
	"io"
	"os"
)

type Root struct {
	Top *BST
}

type BST struct {
	Value int
	Left  *BST
	Right *BST
}

func (r *Root) Insert(v int) *Root {
	if r.Top == nil {
		r.Top = &BST{Value: v, Left: nil, Right: nil}
	} else {
		r.Top.Insert(v)
	}
	return r
}

func (n *BST) Insert(v int) {
	if n == nil {
		return
	} else if v < n.Value {
		if n.Left == nil {
			n.Left = &BST{Value: v, Left: nil, Right: nil}
		} else {
			n.Left.Insert(v)
		}
	} else {
		if n.Right == nil {
			n.Right = &BST{Value: v, Left: nil, Right: nil}
		} else {
			n.Right.Insert(v)
		}
	}
}

func PrintTree(w io.Writer, n *BST, ns int, ch rune) {
	if n == nil {
		return
	}
	for i := 0; i < ns; i++ {
		fmt.Fprint(w, " ")
	}
	fmt.Fprintf(w, "%c:%v\n", ch, n.Value)
	PrintTree(w, n.Left, ns+2, 'L')
	PrintTree(w, n.Right, ns+2, 'R')
}

func convertToSlice(aSlice []int, t *BST, ns int) []int {
	if t == nil {
		return aSlice
	}

	for i := 0; i < ns; i++ {
		if t.Left != nil {
			aSlice = append(aSlice, t.Left.Value)
		}
		if t.Right != nil {
			aSlice = append(aSlice, t.Right.Value)
		}
	}

	aSlice = convertToSlice(aSlice, t.Left, ns+2)
	aSlice = convertToSlice(aSlice, t.Right, ns+2)
	return aSlice
}

func (tree *BST) FindClosestValue(target int) int {
	// Write your code here.
	PrintTree(os.Stdout, tree, 0, 'M')
	fmt.Printf("%v", tree)
	treeSlice := []int{}
	treeSlice = convertToSlice(treeSlice, tree, 0)
	fmt.Println(treeSlice)
	return -1
}

// NOTE: I have never really been exposed to binary trees or graphs except as
// objects or databases; so I learned initially from these implementations:
// https://www.golangprograms.com/golang-program-to-implement-binary-tree.html
// https://www.bogotobogo.com/GoLang/GoLang_Binary_Search_Tree.php
// https://medium.com/analytics-vidhya/how-to-speed-up-a-tree-structure-traversal-in-go-cd4bd6775520
